#!/usr/bin/env bash
#
# bootstrap installs things.
# Ripped of and modified from https://github.com/mathiasbynens/dotfiles
# TODO: match google's shell style guide

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ''

# Logging functions
info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

yes_no_prompt () {
  local result
  while true; do
    user "$1 [Y/n]"
    read -n 1 input

    if [[ $input = Y ]]; then
      echo ''
      result=0
      break
    elif [[ $input = n ]]; then
      echo ''
      result=1
      break
    else
      echo ''
      info 'Invalid input ('$input'). Use Y or n.'
      echo ''
    fi
  done

  return $result
}

# Symlinking functions
link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

setup_symlinks () {
  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES" -maxdepth 3 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

# Git functions
setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]; then
    info 'Setting up .gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]; then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

# Homebrew setup
setup_homebrew () {
  # Read operating system
  local os=$(uname -s)

  # Deal with operating system
  if [[ "${os}" = "Darwin" ]]; then
    # Check and install XCode Command Line tools
    [[ ! $(xcode-select -p; echo $?) ]] && xcode-select --install

    # Install Homebrew
    echo "Foobar"
    if ! type "brew" > /dev/null; then
      info 'Installing Homebrew.\n'
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
  elif [[ "${os}" = "Linux" ]]; then
    # This is a Linux machine
    if [[ -f /etc/redhat-release ]]; then
      # We're dealing with Fedora/CentOS
      info 'Installing Homebrew dependencies for Fedora/CentOS.\n'
      sudo yum update
      sudo yum groupinstall -y 'Development Tools' && sudo yum install -y curl git m4 ruby texinfo bzip2-devel curl-devel expat-devel ncurses-devel zlib-devel
    elif [[ -f /etc/debian_version ]]; then
      # We're dealing with Debian/Ubuntu
      info 'Installing Homebrew dependencies for Debian/Ubuntu.\n'
      sudo apt-get update
      sudo apt-get install build-essential curl git m4 ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev
    fi

    # Install Homebrew
    if ! type "brew" > /dev/null; then
      info "Installing Linuxbrew.\n"
      ruby -e "$(wget -O- https://raw.github.com/Homebrew/linuxbrew/go/install)"
      # Fixes a problem with gcc not being detected by linuxbrew
      # See https://github.com/Homebrew/linuxbrew/issues/137
      # prefix=$HOME/.linuxbrew
      # ln -s /usr/bin/gcc "$prefix"/bin/gcc-4.4
      # ln -s /usr/bin/g++ "$prefix"/bin/g++-4.4
      # ln -s /usr/bin/gfortran "$prefix"/bin/gfortran-4.4
      # printf "export HOMEBREW_CC=gcc-4.4" >> "$HOME"/.bashrc

      # Put linuxbrew in path
      info "Exporting Linuxbrew to PATH.\n"
      printf "export PATH=\"${HOME}/.linuxbrew/bin:${PATH}\"\n" >> $HOME/.bashrc
      printf "export MANPATH=\"${HOME}/.linuxbrew/share/man:${MANPATH}\"\n" >> $HOME/.bashrc
      printf "export INFOPATH=\"${HOME}/.linuxbrew/share/info:${INFOPATH}\"\n" >> $HOME/.bashrc
    fi
  else
    info "Sorry, Hombrew is only available for OS X and Linux."
    exit 1
  fi
}

find_run_installer () {
  set -e

  cd ${HOME}/.dotfiles

  find . -name $1 | while read installer ; do sh -c "${installer}" ; done
}

# Ask for the administrator password upfront
# sudo -v

# Keep-alive: update existing `sudo` time stamp until all scripts have finished
# while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# Set DOTFILES folder
DOTFILES="$HOME/.dotfiles"

if yes_no_prompt "Install Homebrew?"; then
  setup_homebrew
fi

if yes_no_prompt "Install Homebrew packages?"; then
  find_run_installer brew_packages.sh
fi

if yes_no_prompt "Install Homebrew casks?"; then
  find_run_installer brew_casks.sh
fi

if yes_no_prompt "Setup git?"; then
  setup_gitconfig
fi

if yes_no_prompt "Symlink dotfiles?"; then
  setup_symlinks
fi

if yes_no_prompt "Run remaining installers?"; then
  find_run_installer install.sh
fi

echo ''
echo 'All installed!'
