extends javascript

global !p
import re

def dependencies(inj, snip):
	strings = inj.split(', ')
	result = ''.join(["'%s', " % (string) for string in strings])
	snip.rv = result.strip()[:-1]

def toConstant(inj, snip):
	result = re.sub('(.)([A-Z])', r'\1_\2', inj).upper()
	snip.rv = result
endglobal

priority 10

snippet us "use strict;" b
'use strict';
endsnippet

snippet imp "import library" b
import ${1:\{ ${2:modules} \}} from '${3:library}';
$0
endsnippet

snippet asercon "angular service or controller" bm
const ${1:TYPE}_NAME = '${2:name}';

$2.$inject = [`!p dependencies(t[3], snip)`];

function $2(${3:dependencies}) {
	$0
}

${4:module}.`!p snip.rv = t[1].lower()`($1_NAME, $2);

export default {
	name: $1_NAME,
	component: $2
};
endsnippet

snippet acom "angular component" bm
const name = '${1:name}';
const component  = {
	template: \`
		${3:template-markup}
	\`,
	${4:transclude: ${5: true},}
	bindings: { ${6:bindings} },
	${7:controller () \{
		const $ctrl = this;
		${8}
	\}}
	${9: controller: [`!p dependencies(t[10], snip)`, function(${10:dependencies}) \{
		const $ctrl = this;
		${11:body}
	\}}
};

export default { name, component };
endsnippet

snippet areg "register with angular" bm
${1:module}.${2:type}(name, ${3:constructor});
endsnippet

snippet aexp "export the component" bm
export default {
	name: ${1:name},
	component: ${2:component}
}
endsnippet

snippet aconi "angular controller injection container" m
[\`!p dependencies(t[1], snip)\`, (${1:dependencies}) => {
	$0
}]
endsnippet
